package jvb.pinche.db;

import java.io.IOException;
import java.sql.Connection;
import java.util.Date;
import java.util.Properties;

import javax.sql.DataSource;

import org.apache.commons.dbcp.BasicDataSourceFactory;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;

public class JDBCUtil {   //jdbc 工具类
	private  static  String url;
	private static  String driver;
	private static String username;
	private static String password;
	private static String maxActive;
	private static String maxIdle;
	private static String maxWait;
	private static Properties prop;
	private static DataSource ds;
	static {
		prop=new Properties();
		try {
			prop.load(Thread.currentThread().getContextClassLoader().getResourceAsStream("DB.properties"));
			//加载配置文件
			url=prop.getProperty("url");
			driver=prop.getProperty("driverClassName");
			username=prop.getProperty("username");
			password=prop.getProperty("password");
			maxActive=prop.getProperty("maxActive");
			maxIdle=prop.getProperty("maxIdle");
			maxWait=prop.getProperty("maxWait");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	public static Connection getConn(){
		  try {
		    ds=BasicDataSourceFactory.createDataSource(prop);
		    Connection conn=ds.getConnection();//从连接池里面获得一个连接
		   System.out.println(conn+"连接成功");
		   return  ds.getConnection();
			
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("数据库连接失败....");
			return null;
		}

	}
	public  static  void  realse(Connection conn,PreparedStatement pstmt,ResultSet rs){
		try{
		if(conn!=null)
			conn.close();
		if(pstmt!=null)
			pstmt.close();
		if(rs!=null)
			rs.close();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	public  static  void  realse(Connection conn,PreparedStatement pstmt){
		try{
		if(conn!=null)
			conn.close();
		if(pstmt!=null)
			pstmt.close();
		
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	public static void commit(Connection conn){
		if(conn!=null){
			try {
				conn.commit();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	public static void rollback(Connection conn){
		if(conn!=null){
			try {
				conn.rollback();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	//开启事务(手动开启)
	public static void beginTx(Connection conn){

		if(conn!=null){
			try {
				conn.setAutoCommit(false);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	public static String DateToString(Date d){
		 SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
	     return	sdf.format(d);
	
	}
}
